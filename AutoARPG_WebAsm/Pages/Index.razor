@page "/"
@using AutoARPG_Web.Data
@using System.Text.Json.Serialization
@using Newtonsoft.Json
@using JsonConverter = Newtonsoft.Json.JsonConverter
@using System.Diagnostics

@inject GameStateService State
@inject Blazored.SessionStorage.ISessionStorageService ProtectedLocalStore;
@inject IJSRuntime jsRuntime;

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

@if (gs == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="d-grid gap-2 col-8 mx-auto">
        <div class="btn-group" role="group" aria-label="Basic example">
            <button class="btn btn-secondary" @onclick="() => SendInput(0)">Act</button>
            <button class="btn btn-primary" @onclick="() => SendInput(1)">Look Up</button>
            <button class="btn btn-secondary" @onclick="() => SendInput(2)">Inv</button>
        </div>
    </div>
    <div class="d-grid gap-2 col-8 mx-auto">
        <div class="btn-group" role="group" aria-label="Basic example">
            <button class="btn btn-primary" @onclick="() => SendInput(3)">look<br/>left</button>
            <button class="btn btn-primary" @onclick="() => SendInput(4)">
                <img src="@gs.ImageUrl" width="@_currentCount.TagWidth" height="@_currentCount.TagHeight"/>
            </button>

            <button class="btn btn-primary" @onclick="() => SendInput(5)">look<br/>right</button>
        </div>
    </div>
    <div class="d-grid gap-2 col-8 mx-auto">
        <div class="btn-group" role="group" aria-label="Basic example">
            <button class="btn btn-secondary" @onclick="() => SendInput(6)">Cancel</button>
            <button class="btn btn-primary" @onclick="() => SendInput(7)">Look Down</button>
            <button class="btn btn-secondary" @onclick="() => SendInput(8)">Options</button>
        </div>
    </div>
    <span class="alert-primary">Request took @duration.ToString()</span>
}

@code {
    private GameRenderer? gs;
    private GameState? _currentCount;
    private TimeSpan duration;
    protected override async Task OnInitializedAsync()
    {
        if (!await ProtectedLocalStore.ContainKeyAsync("game"))
        {
            await ProtectedLocalStore.SetItemAsStringAsync("game", JsonConvert.SerializeObject(new GameState()));
        }
        var newVal = await ProtectedLocalStore.GetItemAsStringAsync("game");
        _currentCount = JsonConvert.DeserializeObject<GameState>(newVal) ?? new GameState();
        await jsRuntime.InvokeVoidAsync("console.time", "getState");
        gs = await State.GetStateAsync(_currentCount, jsRuntime);
        await jsRuntime.InvokeVoidAsync("console.timeEnd", "getState");
        await jsRuntime.InvokeVoidAsync("console.time", "genImg");
        await gs.GenImage();
        await jsRuntime.InvokeVoidAsync("console.timeEnd", "genImg");
    }

    private async Task SendInput(int btn)
    {
        Stopwatch sw = new Stopwatch();
        sw.Start();
        if (_currentCount != null)
        {
            switch (btn)
            {
                case 0:
                case 2:
                case 4:
                case 6:
                case 8:
                    break; //nop
                case 1:
                    _currentCount.height /= 2;
                    break;
                case 3:
                    _currentCount.width /= 2;
                    break;
                case 5:
                    _currentCount.width *= 2;
                    break;
                case 7:
                    _currentCount.height *= 2;
                    break;
            }
    // Console.WriteLine($"Received input: {btn}");
            var temp = await UpdateSerialized("game", _currentCount);
            gs = await State.GetStateAsync(temp, jsRuntime);
            await gs.GenImage();
            duration = sw.Elapsed;
        }
    }

    private async Task<T?> UpdateSerialized<T>(string key, T? val)
    {
        var conv = JsonConvert.SerializeObject(val);
        await ProtectedLocalStore.SetItemAsStringAsync(key, conv);
        var newVal = await ProtectedLocalStore.GetItemAsStringAsync(key);
        return JsonConvert.DeserializeObject<T>(newVal);
    }


}