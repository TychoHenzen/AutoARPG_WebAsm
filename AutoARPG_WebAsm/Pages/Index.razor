@page "/"
@using AutoARPG_Web.Data
@using System.Text.Json.Serialization
@using Newtonsoft.Json
@using JsonConverter = Newtonsoft.Json.JsonConverter
@using System.Diagnostics
@using AutoARPG_WebAsm.Scenes

@inject GameStateService State
@inject Blazored.SessionStorage.ISessionStorageService ProtectedLocalStore;
@inject IJSRuntime jsRuntime;
@inject NavigationManager uriHelper;

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

@if (gs == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="d-grid gap-2 col-8 mx-auto">
        <div class="btn-group" role="group" aria-label="Basic example">
            <button class="btn btn-secondary" @onclick="() => SendInput(GameButton.Btn_Act)">Act</button>
            <button class="btn btn-primary" @onclick="() => SendInput(GameButton.Look_Up)">Look Up</button>
            <button class="btn btn-secondary" @onclick="() => SendInput(GameButton.Btn_Inventory)">Inv</button>
        </div>
    </div>
    <div class="d-grid gap-2 col-8 mx-auto">
        <div class="btn-group" role="group" aria-label="Basic example">
            <button class="btn btn-primary" @onclick="() => SendInput(GameButton.Look_Left)">look<br/>left</button>
            <button class="btn btn-primary" @onclick="() => SendInput(GameButton.Move_Forward)">
                <img src="@gs.ImageUrl" width="@_currentCount.TagWidth" height="@_currentCount.TagHeight"/>
            </button>

            <button class="btn btn-primary" @onclick="() => SendInput(GameButton.Look_Right)">look<br/>right</button>
        </div>
    </div>
    <div class="d-grid gap-2 col-8 mx-auto">
        <div class="btn-group" role="group" aria-label="Basic example">
            <button class="btn btn-secondary" @onclick="() => SendInput(GameButton.Btn_Cancel)">Cancel</button>
            <button class="btn btn-primary" @onclick="() => SendInput(GameButton.Look_Down)">Look Down</button>
            <button class="btn btn-secondary" @onclick="() => SendInput(GameButton.Btn_Options)">Options</button>
        </div>
    </div>
    <span class="alert-primary">Request took @duration.ToString()</span>
    <span class="alert-primary">unlocked: @_currentCount.unlockedFeatures[0]/ @_currentCount.unlockedFeatures[1]/ @_currentCount.unlockedFeatures[2]</span>
}

@code {
    private GameRenderer? gs;
    private GameState? _currentCount;
    private TimeSpan duration;
    protected override async Task OnInitializedAsync()
    {
        if (!await ProtectedLocalStore.ContainKeyAsync("game"))
        {
            await ProtectedLocalStore.SetItemAsStringAsync("game", JsonConvert.SerializeObject(new GameState()));
        }
        var newVal = await ProtectedLocalStore.GetItemAsStringAsync("game");
        _currentCount = JsonConvert.DeserializeObject<GameState>(newVal) ?? new GameState();
        await jsRuntime.InvokeVoidAsync("console.time", "getState");
        gs = await State.GetStateAsync<GradientScene>(_currentCount);
        await jsRuntime.InvokeVoidAsync("console.timeEnd", "getState");
        await jsRuntime.InvokeVoidAsync("console.time", "genImg");
        await gs.GenImage();
        await jsRuntime.InvokeVoidAsync("console.timeEnd", "genImg");
    }

    private async Task SendInput(GameButton btn)
    {
        Stopwatch sw = new Stopwatch();
        sw.Start();
        if (_currentCount != null)
        {
            _currentCount = gs?.ActiveScene?.Update(btn, _currentCount) ?? _currentCount;
            if (_currentCount.ShouldRefresh)
            {
                _currentCount.ShouldRefresh = false;
                _currentCount = await UpdateSerialized("game", _currentCount);
                uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
                return;
            }
            _currentCount = await UpdateSerialized("game", _currentCount);

            gs = await State.GetStateAsync<GradientScene>(_currentCount);
            await gs.GenImage();
            duration = sw.Elapsed;
        }
    }

    private async Task<T?> UpdateSerialized<T>(string key, T? val)
    {
        var conv = JsonConvert.SerializeObject(val);
        await ProtectedLocalStore.SetItemAsStringAsync(key, conv);
        var newVal = await ProtectedLocalStore.GetItemAsStringAsync(key);
        return JsonConvert.DeserializeObject<T>(newVal);
    }


}